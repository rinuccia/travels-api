// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/location/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Create Location",
                "parameters": [
                    {
                        "description": "Location Info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Location"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/location/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Returns location based on given ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Location"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/location/{id}/avg": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Retrieves the average location rating based on given id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AvgRating"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/locations": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Returns a list of all locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Locations"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/user/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User Info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Returns user based on given ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user based on given ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/visit/new": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "visit"
                ],
                "summary": "Create Visit",
                "parameters": [
                    {
                        "description": "Visit Info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Visit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Visit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/visit/{id}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "visit"
                ],
                "summary": "Removes visit based on given ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Visit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        },
        "/visits/user/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "visit"
                ],
                "summary": "Returns a list of all user visits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserVisits"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.errResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model.AvgRating": {
            "type": "object",
            "properties": {
                "avg": {
                    "type": "number"
                }
            }
        },
        "model.Location": {
            "type": "object",
            "required": [
                "country",
                "location_id",
                "place"
            ],
            "properties": {
                "country": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "location_id": {
                    "type": "integer"
                },
                "place": {
                    "type": "string"
                }
            }
        },
        "model.Locations": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Location"
                    }
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "gender",
                "last_name",
                "user_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.UserVisit": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "mark": {
                    "type": "integer"
                },
                "place": {
                    "type": "string"
                },
                "visited_at": {
                    "type": "string"
                }
            }
        },
        "model.UserVisits": {
            "type": "object",
            "properties": {
                "visits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserVisit"
                    }
                }
            }
        },
        "model.Visit": {
            "type": "object",
            "required": [
                "location_id",
                "mark",
                "user_id",
                "visit_id",
                "visited_at"
            ],
            "properties": {
                "location_id": {
                    "type": "integer"
                },
                "mark": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 0
                },
                "user_id": {
                    "type": "integer"
                },
                "visit_id": {
                    "type": "integer"
                },
                "visited_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8181",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Travels API",
	Description:      "API Server for Travels Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
